{
	"name": "notebooksInnovationSprint",
	"properties": {
		"configs": {
			"from": "pyspark.sql.window import Window",
			"def": "getLatestFile(file_path):",
			"folders": "folders = mssparkutils.fs.ls(folder_path)",
			"latest_folder": "latest_folder = folders.pop()",
			"if": "if latest_file.isFile:",
			"return": "return '{}/{}'.format(file_path,latest_file.name)",
			"files": "files = mssparkutils.fs.ls(file_path)",
			"latest_file": "latest_file = files.pop()",
			"spark.conf.set('spark.storage.synapse.linkedServiceName',": "'ls_adls_input')",
			"spark.conf.set('fs.azure.account.oauth.provider.type',": "'com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider')",
			"head_household_adls_path": "= getLatestFolder('abfss://dih-distribution@edlcorestdeuprod0001.dfs.core.windows.net/HH_CMPOS_ADS/data')",
			"df_head_household": "= df_head_household.filter(lower(df_head_household.HD_HH_REL_ID) != 'unspecified').select('REL_ID','HD_HH_REL_ID')",
			"commercial_group_adls_path": "= getLatestFolder('abfss://dih-distribution@edlcorestdeuprod0001.dfs.core.windows.net/STO_GGM_CG_CMPOS_ADS/data')",
			"df_commercial_group": "= df_commercial_group.select('REL_ID','HD_CG_REL_ID')",
			"ebx_pega_product_mappping_adls_path": "= getLatestFile('abfss://ebx@edlcorestdeuprod0001.dfs.core.windows.net/EBX_MPD_Pega_product_map/data')",
			"df_ebx_mpd_pega_product_mapping": "= df_ebx_mpd_pega_product_mapping.select('PEGA_PRODUCT','PLV_PRODUCT')",
			"ebx_google_analytics_product_mappping_adls_path": "= getLatestFile('abfss://ebx@edlcorestdeuprod0001.dfs.core.windows.net/EBX_MPD_GA_product_map/data')",
			"df_ebx_google_analytics_product_mappping": "= spark.read.parquet(ebx_google_analytics_product_mappping_adls_path)",
			"pega_interaction_history_edl_adls_path": "= 'abfss://pega-marketing@edlcorestdeuprod0001.dfs.core.windows.net/ih-data/2/data/EDL_LOAD_DT=*/*.parquet'",
			"df_pega_interaction_history_edl": "= df_pega_interaction_history_edl.select('offercode','pychannel','pxoutcometime','customer_id')",
			"mpd_google_analytics_adls_path": "= 'abfss://x239-marketing-performance@dtobistagingpreprd01.dfs.core.windows.net/staging/google_analytics/campaigns_conversions/date=*/*.parquet'",
			"df_mpd_google_analytics": "= spark.read.parquet(mpd_google_analytics_adls_path)",
			"pega_interaction_history_input_adls_path": "= 'abfss://source-pega-interaction@dtobiinputpreprd01.dfs.core.windows.net/pegainteractionhist/1/data/date=*/*.parquet'",
			"df_pega_interaction_history_input": "= df_pega_interaction_history_input.select('offercode','pychannel','pxoutcometime','customer_id')",
			"pega_propositie_inzage_adls_path": "= 'abfss://source-bidm-marketingperformance@dtobiinputpreprd01.dfs.core.windows.net/propositie_inzage/1/data/*.parquet'",
			"df_pega_propositie_inzage": "= df_pega_propositie_inzage.select('Propositiecode','Productnaam')",
			"(to_date(col('pxOutcomeTime'))": "(to_date(col('pxOutcomeTime')) >= to_date(lit('2022-05-13'))) &",
			"(lower(col('pyChannel')).isin('rks',": "(lower(col('pyChannel')).isin('rks', 'kmi')) &",
			"(lower(col('pyOutcome'))": "(lower(col('pyOutcome')) == 'accepted')",
			"df_pega_interaction_history": "= df_pega_interaction_history_input.union(df_pega_interaction_history_edl)",
			"df_pih_product": "=     df_pega_interaction_history.join(",
			"(lower(df_pega_interaction_history.offercode)": "(lower(df_pega_interaction_history.offercode) ==  lower(df_pega_propositie_inzage.Propositiecode)),'inner'",
			"df_pih_product_value": "=     df_pih_product.join(",
			"(lower(df_pih_product.Productnaam)": "(lower(df_pih_product.Productnaam) ==  lower(df_ebx_mpd_pega_product_mapping.PEGA_PRODUCT)),'left'",
			"df_pih_product_value_head_household": "=     df_pih_product_value.join(",
			"(lpad(df_pih_product_value.customer_id,15,'0')": "(lpad(df_pih_product_value.customer_id,15,'0') == df_head_household.REL_ID),'left'",
			"df_pih_product_value_head_household_commercial_group": "= df_pih_product_value_head_household_commercial_group     .withColumn('AssistingCampaignKey',upper(concat(lit('PGM'),col('offercode'))))     .withColumn('CampaignKey',upper(concat(lit('PGM'),col('offercode'))))     .withColumn('GoalKey',lit(None))     .withColumn('LeadChannelKey',upper(col('pychannel')))     .withColumn('LeadDateKey',to_date(col('pxoutcometime')))     .withColumn('LeadProductKey',col('PLV_PRODUCT').cast('Integer').cast('String'))     .withColumn('IsLeadStarted',lit(0))     .withColumn('IsLeadCompleted',lit(0))     .withColumn('SourceSystem',lit('PEGA'))     .withColumn('SourceDomain',lit('RKS+K&MI'))     .withColumn('SourceHeadCustomerGroup',coalesce(col('HD_CG_REL_ID'),col('HD_HH_REL_ID'),lpad(col('customer_id'),15,'0')))     .withColumn('SourceLinkedCustomerNumber',lpad(col('customer_id'),15,'0'))     .withColumn('SourceVisitStartTime',to_timestamp(col('pxoutcometime'),'yyyy-MM-dd HH:mm:ss'))     .withColumn('SourceSessionId',concat(col('customer_id'),lit('|'),unix_timestamp(to_timestamp(col('pxoutcometime'),'yyyy-MM-dd HH:mm:ss')),date_format(to_timestamp(col('pxoutcometime'),'yyyy-MM-dd HH:mm:ss'), \"S\")))     .withColumn('SourceSessionSortOrder',lit(1))     .withColumn('SourceProduct',col('Productnaam'))",
			"(lpad(df_pih_product_value_head_household.customer_id,15,'0')": "(lpad(df_pih_product_value_head_household.customer_id,15,'0') == df_head_household.REL_ID),'left'",
			"df_rks_and_k_and_mi": "=     df_pih_product_value_head_household_commercial_group.select(         'AssistingCampaignKey',",
			"df_mpd_ga_head_household": "=     df_mpd_google_analytics.join(",
			"(df_mpd_google_analytics.linkedKlantnummer": "(df_mpd_google_analytics.linkedKlantnummer == df_head_household.REL_ID),'left'",
			"df_mpd_ga_head_household_commercial_group": "= df_mpd_ga_head_household_commercial_group     .withColumn('GAProduct',explode(array_distinct(split(col('product'),','))))     .withColumn('headCustomerGroup',coalesce(col('HD_CG_REL_ID'),col('HD_HH_REL_ID'),col('linkedKlantnummer')))",
			"df_conversions": "= df_conversions.withColumn(\"firstHitNumberForProductOrGoal\",min('firstHitNumber').over(windowSpec))",
			"(trim(lower(df_conversions.GAProduct))": "(trim(lower(df_conversions.GAProduct)) == trim(lower(df_ebx_google_analytics_product_mappping.PRODUCTINGA))),'left'",
			"windowSpec": "= Window.partitionBy('sourcedomain','date','sessionId','visitStartTime','linkedKlantnummer','headCustomerGroup','channelGrouping','campaign','linkedPromoId','linkedPromoName','GAProduct','PRODUCT','goal')",
			"df_conversions_pivot": "= df_conversions.groupBy('sourcedomain','date','sessionId','visitStartTime','linkedKlantnummer','headCustomerGroup','channelGrouping','campaign','linkedPromoId','linkedPromoName','firstHitNumberForProductOrGoal','GAProduct','PRODUCT','goal').pivot('leadProcessSteptype',['lead_started','lead_completed']).agg(count('leadProcessSteptype'))",
			"df_coversions_pivot": "=     df_coversions_pivot.select(         'AssistingCampaignKey',",
			"df_coversions_union": "= df_coversions_union.withColumn('DailyVisitorId', when(col('DailyVisitorCount') == 1, 0).otherwise(col('DailyVisitorId')))"
		},
		"created": "2022-07-05T14:18:29.0530000+02:00",
		"createdBy": "rebremer@microsoft.com",
		"configMergeRule": {
			"artifact.currentOperation.from": "replace",
			"artifact.currentOperation.def": "replace",
			"artifact.currentOperation.folders": "replace",
			"artifact.currentOperation.latest_folder": "replace",
			"artifact.currentOperation.if": "replace",
			"artifact.currentOperation.return": "replace",
			"artifact.currentOperation.files": "replace",
			"artifact.currentOperation.latest_file": "replace",
			"artifact.currentOperation.spark.conf.set('spark.storage.synapse.linkedServiceName',": "replace",
			"artifact.currentOperation.spark.conf.set('fs.azure.account.oauth.provider.type',": "replace",
			"artifact.currentOperation.head_household_adls_path": "replace",
			"artifact.currentOperation.df_head_household": "replace",
			"artifact.currentOperation.commercial_group_adls_path": "replace",
			"artifact.currentOperation.df_commercial_group": "replace",
			"artifact.currentOperation.ebx_pega_product_mappping_adls_path": "replace",
			"artifact.currentOperation.df_ebx_mpd_pega_product_mapping": "replace",
			"artifact.currentOperation.ebx_google_analytics_product_mappping_adls_path": "replace",
			"artifact.currentOperation.df_ebx_google_analytics_product_mappping": "replace",
			"artifact.currentOperation.pega_interaction_history_edl_adls_path": "replace",
			"artifact.currentOperation.df_pega_interaction_history_edl": "replace",
			"artifact.currentOperation.mpd_google_analytics_adls_path": "replace",
			"artifact.currentOperation.df_mpd_google_analytics": "replace",
			"artifact.currentOperation.pega_interaction_history_input_adls_path": "replace",
			"artifact.currentOperation.df_pega_interaction_history_input": "replace",
			"artifact.currentOperation.pega_propositie_inzage_adls_path": "replace",
			"artifact.currentOperation.df_pega_propositie_inzage": "replace",
			"artifact.currentOperation.(to_date(col('pxOutcomeTime'))": "replace",
			"artifact.currentOperation.(lower(col('pyChannel')).isin('rks',": "replace",
			"artifact.currentOperation.(lower(col('pyOutcome'))": "replace",
			"artifact.currentOperation.df_pega_interaction_history": "replace",
			"artifact.currentOperation.df_pih_product": "replace",
			"artifact.currentOperation.(lower(df_pega_interaction_history.offercode)": "replace",
			"artifact.currentOperation.df_pih_product_value": "replace",
			"artifact.currentOperation.(lower(df_pih_product.Productnaam)": "replace",
			"artifact.currentOperation.df_pih_product_value_head_household": "replace",
			"artifact.currentOperation.(lpad(df_pih_product_value.customer_id,15,'0')": "replace",
			"artifact.currentOperation.df_pih_product_value_head_household_commercial_group": "replace",
			"artifact.currentOperation.(lpad(df_pih_product_value_head_household.customer_id,15,'0')": "replace",
			"artifact.currentOperation.df_rks_and_k_and_mi": "replace",
			"artifact.currentOperation.df_mpd_ga_head_household": "replace",
			"artifact.currentOperation.(df_mpd_google_analytics.linkedKlantnummer": "replace",
			"artifact.currentOperation.df_mpd_ga_head_household_commercial_group": "replace",
			"artifact.currentOperation.df_conversions": "replace",
			"artifact.currentOperation.(trim(lower(df_conversions.GAProduct))": "replace",
			"artifact.currentOperation.windowSpec": "replace",
			"artifact.currentOperation.df_conversions_pivot": "replace",
			"artifact.currentOperation.df_coversions_pivot": "replace",
			"artifact.currentOperation.df_coversions_union": "replace"
		}
	}
}