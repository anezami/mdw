{
	"name": "Conform Customer Data",
	"properties": {
		"folder": {
			"name": "Challenge 04"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/513a7987-b0d9-4106-a24d-4b3f49136ea8/resourceGroups/mdw-oh-rbr-westeurope/providers/Microsoft.Synapse/workspaces/southridgesynapserbr/bigDataPools/SparkPool",
				"name": "SparkPool",
				"type": "Spark",
				"endpoint": "https://southridgesynapserbr.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Challenge 04: Conform the customer data\r\n",
					"\r\n",
					"This notebook contains the code to conform the source data in the data lake into a more useable dataset. \r\n",
					"\r\n",
					"We should end up with following schema:\r\n",
					"\r\n",
					"    [CustomerID]      UNIQUEIDENTIFIER NOT NULL,\r\n",
					"    [LastName]        VARCHAR (50)     NOT NULL,\r\n",
					"    [FirstName]       VARCHAR (30)     NOT NULL,\r\n",
					"    [AddressLine1]    VARCHAR (50)     NOT NULL,\r\n",
					"    [AddressLine2]    VARCHAR (50)     NULL,\r\n",
					"    [City]            VARCHAR (30)     NOT NULL,\r\n",
					"    [State]           CHAR (2)         NOT NULL,\r\n",
					"    [ZipCode]         CHAR (5)         NOT NULL,\r\n",
					"    [PhoneNumber]     CHAR (10)        NOT NULL,"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import uuid\r\n",
					"import pyspark.sql.functions as F\r\n",
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.types import StringType,DateType,LongType,IntegerType,TimestampType\r\n",
					"\r\n",
					"# This is used in the following cells to create a new unique identifier\r\n",
					"\r\n",
					"uuidUdf = F.udf(lambda : str(uuid.uuid4()), StringType())"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load the customer and address data from CloudSales"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customers_cloudsales = spark.read.parquet(\"abfss://southridge@datalakesouthridgerbr.dfs.core.windows.net/raw/cloudsales/Customers.parquet\")\r\n",
					"addresses_cloudsales = spark.read.parquet(\"abfss://southridge@datalakesouthridgerbr.dfs.core.windows.net/raw/cloudsales/Addresses.parquet\")\r\n",
					"\r\n",
					"all_cloudsales_customers = customers_cloudsales.drop('CreatedDate', 'UpdatedDate') \\\r\n",
					"  .join(addresses_cloudsales.drop('CreatedDate', 'UpdatedDate'), on='CustomerID', how='left') \\\r\n",
					"  .withColumn('SourceSystemId', F.lit('SR')) \\\r\n",
					"  .select('CustomerID', 'LastName', 'FirstName', 'AddressLine1', 'AddressLine2', 'City', 'State', 'ZipCode', 'PhoneNumber', 'SourceSystemId')\r\n",
					"\r\n",
					"all_cloudsales_customers.show()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load the customer and address data from CloudStreaming"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customers_cloudstreaming = spark.read.parquet(\"abfss://southridge@datalakesouthridgerbr.dfs.core.windows.net/raw/cloudstreaming/Customers.parquet\")\r\n",
					"adddresses_cloudstreaming = spark.read.parquet(\"abfss://southridge@datalakesouthridgerbr.dfs.core.windows.net/raw/cloudstreaming/Addresses.parquet\")\r\n",
					"\r\n",
					"all_cloudstreaming_customers = customers_cloudstreaming.drop('CreatedDate', 'UpdatedDate') \\\r\n",
					"  .join(adddresses_cloudstreaming.drop('CreatedDate', 'UpdatedDate'), on='CustomerID', how='left') \\\r\n",
					"  .withColumn('SourceSystemId', F.lit('SR')) \\\r\n",
					"  .select('CustomerID', 'LastName', 'FirstName', 'AddressLine1', 'AddressLine2', 'City', 'State', 'ZipCode', 'PhoneNumber', 'SourceSystemId')\r\n",
					"\r\n",
					"all_cloudstreaming_customers.show()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load the customer and address data from FourthCoffee"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customers_fourthcoffee = spark.read.csv(\"abfss://southridge@datalakesouthridgerbr.dfs.core.windows.net/raw/FourthCoffee/Customers.csv\", header='true', inferSchema='true')\r\n",
					"customers_fourthcoffee = customers_fourthcoffee.withColumn('SourceSystemId', F.lit('FC')) \\\r\n",
					"                                               .select('CustomerID', 'LastName', 'FirstName', 'AddressLine1', 'AddressLine2', 'City', 'State', 'ZipCode', 'PhoneNumber', 'SourceSystemId')\r\n",
					"customers_fourthcoffee.show()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load the customer and address data from VanArsdel"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customers_vanarsdel = spark.read.json(\"abfss://southridge@datalakesouthridgerbr.dfs.core.windows.net/raw/VanArsdel/Customers.json\")\r\n",
					"\r\n",
					"customers_vanarsdel = customers_vanarsdel \\\r\n",
					"                        .withColumn('SourceSystemId', F.lit('VA')) \\\r\n",
					"                        .select('CustomerID', 'LastName', 'FirstName', 'AddressLine1', 'AddressLine2', 'City', 'State', 'ZipCode', 'PhoneNumber', 'SourceSystemId')\r\n",
					"\r\n",
					"customers_vanarsdel.show()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Combine all the customer data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"all_customers = all_cloudsales_customers    \\\r\n",
					"                    .union(all_cloudstreaming_customers) \\\r\n",
					"                    .union(customers_fourthcoffee) \\\r\n",
					"                    .union(customers_vanarsdel) \r\n",
					"\r\n",
					"all_customers.show()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"all_customers.write.mode(\"overwrite\").parquet(\"abfss://conformed@datalakesouthridgerbr.dfs.core.windows.net/customers\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}